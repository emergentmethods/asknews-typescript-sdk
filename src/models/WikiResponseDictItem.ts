/* tslint:disable */
/* eslint-disable */
/**
 * AskNews API
 * AskNews API
 *
 * The version of the OpenAPI document: 0.22.7
 * Contact: contact@emergentmethods.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CirrusMetadata } from './CirrusMetadata';
import {
    CirrusMetadataFromJSON,
    CirrusMetadataFromJSONTyped,
    CirrusMetadataToJSON,
    CirrusMetadataToJSONTyped,
} from './CirrusMetadata';

/**
 * 
 * @export
 * @interface WikiResponseDictItem
 */
export interface WikiResponseDictItem {
    /**
     * 
     * @type {string}
     * @memberof WikiResponseDictItem
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof WikiResponseDictItem
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof WikiResponseDictItem
     */
    url: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof WikiResponseDictItem
     */
    categories: Array<string>;
    /**
     * 
     * @type {Date}
     * @memberof WikiResponseDictItem
     */
    timestamp: Date;
    /**
     * 
     * @type {CirrusMetadata}
     * @memberof WikiResponseDictItem
     */
    cirrusMetadata?: CirrusMetadata | null;
    /**
     * 
     * @type {string}
     * @memberof WikiResponseDictItem
     */
    pointId?: string | null;
}

/**
 * Check if a given object implements the WikiResponseDictItem interface.
 */
export function instanceOfWikiResponseDictItem(value: object): value is WikiResponseDictItem {
    if (!('content' in value) || value['content'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('categories' in value) || value['categories'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    return true;
}

export function WikiResponseDictItemFromJSON(json: any): WikiResponseDictItem {
    return WikiResponseDictItemFromJSONTyped(json, false);
}

export function WikiResponseDictItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): WikiResponseDictItem {
    if (json == null) {
        return json;
    }
    return {
        
        'content': json['content'],
        'title': json['title'],
        'url': json['url'],
        'categories': json['categories'],
        'timestamp': (new Date(json['timestamp'])),
        'cirrusMetadata': json['cirrus_metadata'] == null ? undefined : CirrusMetadataFromJSON(json['cirrus_metadata']),
        'pointId': json['point_id'] == null ? undefined : json['point_id'],
    };
}

export function WikiResponseDictItemToJSON(json: any): WikiResponseDictItem {
    return WikiResponseDictItemToJSONTyped(json, false);
}

export function WikiResponseDictItemToJSONTyped(value?: WikiResponseDictItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'content': value['content'],
        'title': value['title'],
        'url': value['url'],
        'categories': value['categories'],
        'timestamp': ((value['timestamp']).toISOString()),
        'cirrus_metadata': CirrusMetadataToJSON(value['cirrusMetadata']),
        'point_id': value['pointId'],
    };
}

