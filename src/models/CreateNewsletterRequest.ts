/* tslint:disable */
/* eslint-disable */
/**
 * AskNews API
 * AskNews API
 *
 * The version of the OpenAPI document: 0.22.7
 * Contact: contact@emergentmethods.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CreateNewsletterRequest
 */
export interface CreateNewsletterRequest {
    /**
     * The name of the newsletter.
     * @type {string}
     * @memberof CreateNewsletterRequest
     */
    name: string;
    /**
     * The natural language query to run for the newsletter.
     * @type {string}
     * @memberof CreateNewsletterRequest
     */
    query: string;
    /**
     * The cron schedule for the newsletter. For example daily at 00:00 UTC is '0 0 * * *'. See https://crontab.run/ for more examples
     * @type {string}
     * @memberof CreateNewsletterRequest
     */
    cron: string;
    /**
     * The model to use for the newsletter.
     * @type {string}
     * @memberof CreateNewsletterRequest
     */
    model: CreateNewsletterRequestModelEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateNewsletterRequest
     */
    subject?: string | null;
    /**
     * The sender of the newsletter.
     * @type {string}
     * @memberof CreateNewsletterRequest
     */
    sender: string;
    /**
     * 
     * @type {string}
     * @memberof CreateNewsletterRequest
     */
    logoUrl?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateNewsletterRequest
     */
    replyTo?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateNewsletterRequest
     */
    audienceId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateNewsletterRequest
     */
    resendApiKey?: string | null;
    /**
     * Whether the newsletter is public or not. If not provided, the newsletter will be public. If you make the newsletter public only title and query will be shown.
     * @type {boolean}
     * @memberof CreateNewsletterRequest
     */
    _public?: boolean;
    /**
     * Whether the newsletter is active or not. If not provided, the newsletter will be active. If you make the newsletter inactive, it will not be sent.
     * @type {boolean}
     * @memberof CreateNewsletterRequest
     */
    active?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof CreateNewsletterRequest
     */
    expiresAt?: Date | null;
}


/**
 * @export
 */
export const CreateNewsletterRequestModelEnum = {
    Gpt4o: 'gpt-4o',
    Gpt4oMini: 'gpt-4o-mini',
    Claude35SonnetLatest: 'claude-3-5-sonnet-latest',
    MetaLlamaMetaLlama31405BInstruct: 'meta-llama/Meta-Llama-3.1-405B-Instruct',
    MetaLlamaMetaLlama3370BInstruct: 'meta-llama/Meta-Llama-3.3-70B-Instruct'
} as const;
export type CreateNewsletterRequestModelEnum = typeof CreateNewsletterRequestModelEnum[keyof typeof CreateNewsletterRequestModelEnum];


/**
 * Check if a given object implements the CreateNewsletterRequest interface.
 */
export function instanceOfCreateNewsletterRequest(value: object): value is CreateNewsletterRequest {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('query' in value) || value['query'] === undefined) return false;
    if (!('cron' in value) || value['cron'] === undefined) return false;
    if (!('model' in value) || value['model'] === undefined) return false;
    if (!('sender' in value) || value['sender'] === undefined) return false;
    return true;
}

export function CreateNewsletterRequestFromJSON(json: any): CreateNewsletterRequest {
    return CreateNewsletterRequestFromJSONTyped(json, false);
}

export function CreateNewsletterRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateNewsletterRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'query': json['query'],
        'cron': json['cron'],
        'model': json['model'],
        'subject': json['subject'] == null ? undefined : json['subject'],
        'sender': json['sender'],
        'logoUrl': json['logo_url'] == null ? undefined : json['logo_url'],
        'replyTo': json['reply_to'] == null ? undefined : json['reply_to'],
        'audienceId': json['audience_id'] == null ? undefined : json['audience_id'],
        'resendApiKey': json['resend_api_key'] == null ? undefined : json['resend_api_key'],
        '_public': json['public'] == null ? undefined : json['public'],
        'active': json['active'] == null ? undefined : json['active'],
        'expiresAt': json['expires_at'] == null ? undefined : (new Date(json['expires_at'])),
    };
}

export function CreateNewsletterRequestToJSON(json: any): CreateNewsletterRequest {
    return CreateNewsletterRequestToJSONTyped(json, false);
}

export function CreateNewsletterRequestToJSONTyped(value?: CreateNewsletterRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'query': value['query'],
        'cron': value['cron'],
        'model': value['model'],
        'subject': value['subject'],
        'sender': value['sender'],
        'logo_url': value['logoUrl'],
        'reply_to': value['replyTo'],
        'audience_id': value['audienceId'],
        'resend_api_key': value['resendApiKey'],
        'public': value['_public'],
        'active': value['active'],
        'expires_at': value['expiresAt'] == null ? undefined : ((value['expiresAt'] as any).toISOString()),
    };
}

