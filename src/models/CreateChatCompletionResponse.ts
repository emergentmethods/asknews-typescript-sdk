/* tslint:disable */
/* eslint-disable */
/**
 * AskNews API
 * AskNews API
 *
 * The version of the OpenAPI document: 0.18.22
 * Contact: contact@emergentmethods.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CreateChatCompletionResponseUsage } from './CreateChatCompletionResponseUsage';
import {
    CreateChatCompletionResponseUsageFromJSON,
    CreateChatCompletionResponseUsageFromJSONTyped,
    CreateChatCompletionResponseUsageToJSON,
    CreateChatCompletionResponseUsageToJSONTyped,
} from './CreateChatCompletionResponseUsage';
import type { CreateChatCompletionResponseChoice } from './CreateChatCompletionResponseChoice';
import {
    CreateChatCompletionResponseChoiceFromJSON,
    CreateChatCompletionResponseChoiceFromJSONTyped,
    CreateChatCompletionResponseChoiceToJSON,
    CreateChatCompletionResponseChoiceToJSONTyped,
} from './CreateChatCompletionResponseChoice';

/**
 * 
 * @export
 * @interface CreateChatCompletionResponse
 */
export interface CreateChatCompletionResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateChatCompletionResponse
     */
    id: string;
    /**
     * 
     * @type {number}
     * @memberof CreateChatCompletionResponse
     */
    created: number;
    /**
     * 
     * @type {string}
     * @memberof CreateChatCompletionResponse
     */
    object?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChatCompletionResponse
     */
    model?: string;
    /**
     * 
     * @type {CreateChatCompletionResponseUsage}
     * @memberof CreateChatCompletionResponse
     */
    usage: CreateChatCompletionResponseUsage;
    /**
     * 
     * @type {Array<CreateChatCompletionResponseChoice>}
     * @memberof CreateChatCompletionResponse
     */
    choices: Array<CreateChatCompletionResponseChoice>;
}

/**
 * Check if a given object implements the CreateChatCompletionResponse interface.
 */
export function instanceOfCreateChatCompletionResponse(value: object): value is CreateChatCompletionResponse {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    if (!('usage' in value) || value['usage'] === undefined) return false;
    if (!('choices' in value) || value['choices'] === undefined) return false;
    return true;
}

export function CreateChatCompletionResponseFromJSON(json: any): CreateChatCompletionResponse {
    return CreateChatCompletionResponseFromJSONTyped(json, false);
}

export function CreateChatCompletionResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateChatCompletionResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'created': json['created'],
        'object': json['object'] == null ? undefined : json['object'],
        'model': json['model'] == null ? undefined : json['model'],
        'usage': CreateChatCompletionResponseUsageFromJSON(json['usage']),
        'choices': ((json['choices'] as Array<any>).map(CreateChatCompletionResponseChoiceFromJSON)),
    };
}

export function CreateChatCompletionResponseToJSON(json: any): CreateChatCompletionResponse {
    return CreateChatCompletionResponseToJSONTyped(json, false);
}

export function CreateChatCompletionResponseToJSONTyped(value?: CreateChatCompletionResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'created': value['created'],
        'object': value['object'],
        'model': value['model'],
        'usage': CreateChatCompletionResponseUsageToJSON(value['usage']),
        'choices': ((value['choices'] as Array<any>).map(CreateChatCompletionResponseChoiceToJSON)),
    };
}

